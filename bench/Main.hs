{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications  #-}

module Main where

import           Criterion.Main
import           Data.ByteString        (ByteString)
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Lazy   as BSL
import           Data.Default

import Database.Bolt               (BoltCfg (..), Structure, connect, query, run)
import Database.Bolt.Serialization (pack, unpackAction, unpackT)

main :: IO ()
main = defaultMain
  [ bgroup "unpackAction"
    [ bench "unpack big node" $ nf
      (either (error "wat") id . unpackAction @Structure unpackT) (BSL.fromStrict input)
    ]
  , bgroup "pack"
    [ bench "pack big node" $ nf
      pack decodedInput
    ]
  , env (connect $ def { user = "neo4j", password = "test" })
    $ \pipe -> bgroup "Network tests"
      [ bench "fetch big node" $ nfIO $ run pipe $ query "MATCH (b:BigNode) RETURN b"
      ]
  ]

decodedInput :: Structure
decodedInput = either (error "wat") id $ unpackAction @Structure unpackT $ BSL.fromStrict input

input :: ByteString
input = either (error "wat") id $ B64.decode
  ""
